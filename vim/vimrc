set nocompatible              " be iMproved, required
set showcmd
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'


" Plugins

" Some defaults kindof
Plugin 'tpope/vim-commentary'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'vim-scripts/YankRing.vim'
Plugin 'vim-scripts/auto-pairs-gentle'
" Plugin for snippets
" integrates with a completion plugin
Plugin 'SirVer/ultisnips'
" Collection of useful snippets
Plugin 'honza/vim-snippets'
" Use leader+l or leader+q to toggle location/quick list
Plugin 'milkypostman/vim-togglelist'
" This plugin takes the advantage of new apis in Vim 8 (and NeoVim) to
" enable you to run shell commands in background and read output
" in the quickfix window in realtime
Plugin 'skywind3000/asyncrun.vim'

" Nerdtree
Plugin 'scrooloose/nerdtree'

" Moving around and such
Plugin 'easymotion/vim-easymotion'
Plugin 'ctrlpvim/ctrlp.vim'

" Sparkup lets you write HTML code faster
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Haskell
Plugin 'sdiehl/vim-ormolu' " needs ormolu on $PATH
Plugin 'dense-analysis/ale' " Asynchronous Lint Engine
" Haskell syntax highlitght
Plugin 'vim-scripts/haskell.vim'

" Python
Plugin 'psf/black', { 'branch': 'stable' }

" Interactive command execution in Vim.
Plugin 'Shougo/vimproc.vim'

" Purescript
Plugin 'purescript-contrib/purescript-vim'

" status bar
Plugin 'bling/vim-airline'

" autocomplete
Plugin 'Shougo/deoplete.nvim'
Plugin 'roxma/nvim-yarp'
Plugin 'roxma/vim-hug-neovim-rpc'

" uses the sign column to indicate added, modified and removed lines in a file that is managed
" by a version control system (VCS)
Plugin 'mhinz/vim-signify'
"A vim plugin to display the indention levels with thin vertical lines
Plugin 'Yggdroot/indentLine'

" Markdown
Plugin 'plasticboy/vim-markdown'

" Themes
Plugin 'flazz/vim-colorschemes'

" Dpaste
Plugin 'denibertovic/Dpaste.com-Plugin'

" todo.txt
Plugin 'freitass/todo.txt-vim'

" Dhall
Plugin 'vmchale/dhall-vim'

" Formatting
Plugin 'sbdchd/neoformat'

" Nix
Plugin 'LnL7/vim-nix'

" Indentation guides
" Plugin 'nathanaelkane/vim-indent-guides'

" vim gist
Plugin 'mattn/webapi-vim'
Plugin 'mattn/vim-gist'

" =============== Sensible defaults ===============

" Whiste space: Show tabs
set list
set listchars=tab:\|\
set linebreak

" use systems primary clipboad
set clipboard=unnamed

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" re-map leader key
" let mapleader=","
let maplocalleader = "\\"

set completeopt=menu,longest

" Quickly edit/reload the vimrc file
" edit
nmap <silent> <leader>ev :e $MYVIMRC<CR>
" reload
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" tab manipulation
" nnoremap <C-j> :tabprev<cr>
" nnoremap <C-k> :tabnext<cr>

" buffer manipulation
:noremap <C-j> :bprev<CR>
:noremap <C-k> :bnext<CR>

" window manipulation
:map <F6> <C-W>w

" Don't fold blocks
let g:haskell_conceal = 0
autocmd FileType haskell setlocal nofoldenable
autocmd FileType cabal setlocal nofoldenable
autocmd FileType markdown setlocal nofoldenable
autocmd FileType yaml setlocal nofoldenable

set pastetoggle=<F2>

" markdown folding
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
autocmd FileType markdown set tw=120

" tabs and spaces and indent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set autoindent

let g:indentLine_enabled = 0

" line numbers
set number

" Close buffer
nnoremap <C-d> :bd<CR>

" Enable to switch between buffers without saving
set hidden

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" status line at all times
set laststatus=2

" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1


" Spelling
nnoremap <F7> :setlocal spell! spelllang=en_us<CR>
autocmd FileType gitcommit setlocal spell

" =============== PLUGINS ===============


" =============== CTRLP ===============
" Custom ctrlp ignore options
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn|spago)|(dist|node_modules|build|output)$',
  \ 'file': '\v\.(pyc)$',
  \ }

" =============== Color Theme ===============
colorscheme busybee
highlight SpellBad ctermbg=088

" =============== Hoogle ===============
au BufNewFile,BufRead *.hs map <buffer> <F1> :Hoogle
" au BufNewFile,BufRead *.hs map <buffer> <S-F1> :HoogleLine<CR>

" =============== Easymotion> =============>==

" re-map default <Leader> <Leader> to just <Leader>
" nmap s <Plug>(easymotion-sn)
" nmap t <Plug>(easymotion-tn)
" don't allow abuse of hjkl
" map <localleader>l <Plug>(easymotion-lineforward)
" map <localleader>j <Plug>(easymotion-j)
" map <localleader>k <Plug>(easymotion-k)
" map <localleader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" =============== Yankring ===============
nnoremap <silent> <F12> :YRShow<CR>

" ================= ALE =====================
"
" show multi-line errors in vim by combining your <Leader> key + ?
" autocmd FileType haskell nnoremap <buffer> <leader>a :call ale#cursor#ShowCursorDetail()<cr>
let g:ale_linters = {
      \   'haskell': ['hlint'],
      \   'python': ['flake8']
      \}

let g:ale_fixers = {
      \   'haskell': ['hlint'],
      \   'python': ['black']
      \}


let g:ale_fix_on_save = 1

" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)

"let g:ale_lint_on_text_changed = 'never'

highlight ALEWarning ctermbg=none

" TEMPORARY FIX for issue: https://github.com/w0rp/ale/issues/1334
" Seem to be fixed NOW....check for a while and then remove later
" UPDATE: Updated plugin has fixed this error and the workaround is not needed
" anymore
"let g:ale_echo_cursor = 1

" =============== Tabular ===============
let g:haskell_tabular = 1

vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>

" =============== UltiSnips ===============
let g:UltiSnipsExpandTrigger="<tab>"

" ormolu
let g:ormolu_disable = 1
nnoremap tf :call RunOrmolu()<CR>
nnoremap to :call ToggleOrmolu()<CR>
nnoremap td :call DisableOrmolu()<CR>
xnoremap tb :<c-u>call OrmoluBlock()<CR>

" ========= Haskell specific ==========
" au FileType haskell compiler ghc
" au FileType haskell setlocal makeprg=stack

" ========= deoplete =======
let g:deoplete#enable_at_startup = 1

" Neo format purescript
let g:neoformat_enabled_purescript = ['purty']

function! SaveWithTS(filename) range
    let l:extension = '.' . fnamemodify( a:filename, ':e' )
    if len(l:extension) == 1
        let l:extension = '.txt'
    endif

    let l:filename = escape( fnamemodify(a:filename, ':r') . strftime("-%Y-%m-%dT%H-%M-%S") . l:extension, ' ' )

    execute "write " . l:filename
endfunction

command! -nargs=1 SWT call SaveWithTS( <q-args> )

" Black NOTE: We're using ALE for this but I'll leave this here just in case
" augroup black_on_save
"   autocmd!
"   autocmd BufWritePre *.py Black
" augroup end

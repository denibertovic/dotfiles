set nocompatible              " be iMproved, required
set showcmd
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'


" Plugins

" Some defaults kindof
Plugin 'tpope/vim-commentary'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'vim-scripts/YankRing.vim'
Plugin 'vim-scripts/auto-pairs-gentle'
" Plugin for snippets
" integrates with a completion plugin
Plugin 'SirVer/ultisnips'
" Collection of useful snippets
Plugin 'honza/vim-snippets'
" Use leader+l or leader+q to toggle location/quick list
Plugin 'milkypostman/vim-togglelist'
" This plugin takes the advantage of new apis in Vim 8 (and NeoVim) to
" enable you to run shell commands in background and read output
" in the quickfix window in realtime
Plugin 'skywind3000/asyncrun.vim'

" Moving around and such
Plugin 'easymotion/vim-easymotion'
Plugin 'ctrlpvim/ctrlp.vim'

" Sparkup lets you write HTML code faster
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Haskell
Plugin 'alx741/vim-hindent' " needs hindent on $PATH (stack install hindent)
Plugin 'Twinside/vim-hoogle' " stack install hoogle; hoogle generate
Plugin 'w0rp/ale' " Asynchronous Lint Engine
Plugin 'eagletmt/ghcmod-vim'  " needs stack install ghc-mod
" Plugin 'nbouscal/vim-stylish-haskell' " needs stylish-haskell on $PHATH (stack install stylish-haskell)
" Haskell syntax highlitght
Plugin 'vim-scripts/haskell.vim'
" Hooks into deoplete for completions
Plugin 'mkasa/lushtags'
Plugin 'majutsushi/tagbar'
Plugin 'mkasa/neco-ghc-lushtags'


" Interactive command execution in Vim.
Plugin 'Shougo/vimproc.vim'

" Purescript
Plugin 'purescript-contrib/purescript-vim'
Plugin 'FrigoEU/psc-ide-vim'

" status bar
Plugin 'bling/vim-airline'

" autocomplete
Plugin 'Shougo/deoplete.nvim'
Plugin 'roxma/nvim-yarp'
Plugin 'roxma/vim-hug-neovim-rpc'

" uses the sign column to indicate added, modified and removed lines in a file that is managed
" by a version control system (VCS)
Plugin 'mhinz/vim-signify'
"A vim plugin to display the indention levels with thin vertical lines
Plugin 'Yggdroot/indentLine'

" Markdown
Plugin 'plasticboy/vim-markdown'

" Themes
Plugin 'tomasr/molokai'
Plugin 'flazz/vim-colorschemes'

" Dpaste
Plugin 'vim-scripts/Dpaste.com-Plugin'

" todo.txt
Plugin 'freitass/todo.txt-vim'

" =============== Sensible defaults ===============

" Whiste space: Show tabs
set list
set listchars=tab:\|\

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" re-map leader key
" let mapleader=","
let maplocalleader = "\\"

set completeopt=menu,longest

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" tab manipulation
" nnoremap <C-j> :tabprev<cr>
" nnoremap <C-k> :tabnext<cr>

" buffer manipulation
:noremap <C-j> :bprev<CR>
:noremap <C-k> :bnext<CR>

" window manipulation
:map <F6> <C-W>w

" Don't fold blocks
let g:haskell_conceal = 0
autocmd FileType haskell setlocal nofoldenable
autocmd FileType cabal setlocal nofoldenable

set pastetoggle=<F2>

" markdown folding
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_conceal = 0
autocmd FileType markdown set tw=120

" tabs and spaces and indent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set autoindent

let g:indentLine_enabled = 0

" line numbers
set number

" Close buffer
nnoremap <C-d> :bd<CR>

" Enable to switch between buffers without saving
set hidden

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" status line at all times
set laststatus=2

" Airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1


" Spelling
nnoremap <F7> :setlocal spell! spelllang=en_us<CR>
autocmd FileType gitcommit setlocal spell

" =============== PLUGINS ===============


" =============== CTRLP ===============
" Custom ctrlp ignore options
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)|(dist|node_modules|build)$',
  \ 'file': '\v\.(pyc)$',
  \ }

" =============== Color Theme ===============
colorscheme busybee

" =============== Hoogle ===============
au BufNewFile,BufRead *.hs map <buffer> <F1> :Hoogle
" au BufNewFile,BufRead *.hs map <buffer> <S-F1> :HoogleLine<CR>

" =============== Easymotion> =============>==

" re-map default <Leader> <Leader> to just <Leader>
" nmap s <Plug>(easymotion-sn)
" nmap t <Plug>(easymotion-tn)
" don't allow abuse of hjkl
" map <localleader>l <Plug>(easymotion-lineforward)
" map <localleader>j <Plug>(easymotion-j)
" map <localleader>k <Plug>(easymotion-k)
" map <localleader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" =============== Yankring ===============
nnoremap <silent> <F12> :YRShow<CR>

" =============== GhcMod bindings ===============

nnoremap <F5>  :GhcModCheckAndLint<CR>
nnoremap <C-h> :GhcModType<CR>
nnoremap <C-l> :GhcModTypeClear<CR>
nnoremap <leader>- :GhcModInfo<CR>

map <silent> ti :GhcModTypeInsert<CR>
map <silent> ts :GhcModSplitFunCase<CR>
map <silent> tt :GhcModType<CR>
map <silent> tc :GhcModTypeClear<CR>
map <silent> tg :GhcModSigCodegen<CR>
" Auto lint and check with ghc-mod on buffer write
" autocmd BufWritePost *.hs GhcModCheckAsync

" ================= ALE =====================
"
" show multi-line errors in vim by combining your <Leader> key + ?
autocmd FileType haskell nnoremap <buffer> <leader>a :call ale#cursor#ShowCursorDetail()<cr>
let g:ale_linters ={
      \   'haskell': ['hlint', 'hdevtools', 'hfmt'],
      \}

" nmap <silent> <C-k> <Plug>(ale_previous_wrap)
" nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_lint_on_text_changed = 'never'

highlight ALEWarning ctermbg=none


" TEMPORARY FIX for issue: https://github.com/w0rp/ale/issues/1334
let g:ale_echo_cursor = 0

" =============== Tabular ===============
let g:haskell_tabular = 1

vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>

" =============== UltiSnips ===============
let g:UltiSnipsExpandTrigger="<C-u>"

" hindent
let g:hindent_on_save = 0

" ========= Haskell specific ==========
au FileType haskell compiler ghc
au FileType haskell setlocal makeprg=stack

" ========= deoplete =======
let g:deoplete#enable_at_startup = 1

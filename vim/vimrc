set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'


" Plugins

" Some defaults kindof
Plugin 'tpope/vim-commentary'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/YankRing.vim'
Plugin 'jiangmiao/auto-pairs'

" Moving around and such
Plugin 'Lokaltog/vim-easymotion'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-scripts/buftabs'

" Markup
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Haskell mode
Plugin 'Twinside/vim-hoogle'
Plugin 'eagletmt/ghcmod-vim'
Plugin 'nbouscal/vim-stylish-haskell'
Plugin 'Shougo/vimproc.vim'

" Syntax highlight and autocomplete
Plugin 'eagletmt/neco-ghc'
Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'
Plugin 'Shougo/neocomplete.vim'

" Git gutters
Plugin 'mhinz/vim-signify'

" Markdown
Plugin 'plasticboy/vim-markdown'

" Themes
Plugin 'tomasr/molokai'
Plugin 'flazz/vim-colorschemes'

" Dpaste
Plugin 'vim-scripts/Dpaste.com-Plugin'

" Cabal path
let $PATH = $PATH . ':' . expand("~/.cabal/bin")

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" re-map leader key
let mapleader=","

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>


" Custom ctrlp ignore options
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)|(dist)$',
  \ 'file': '\v\.(pyc)$',
  \ }

" tab manipulation
" nnoremap <C-j> :tabprev<cr>
" nnoremap <C-k> :tabnext<cr>

" buffer manipulation
:noremap <C-j> :bprev<CR>
:noremap <C-k> :bnext<CR>

" Don't fold blocks
let g:haskell_conceal = 0
autocmd FileType haskell setlocal nofoldenable

set pastetoggle=<F2>

" markdown folding
let g:vim_markdown_folding_disabled=1

" tabs and spaces and indent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set autoindent

" line numbers
set number

" highlithgt trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" status line at all times
set laststatus=2

" use powerline fonts
let g:airline_powerline_fonts = 1

" Color Theme
colorscheme busybee

" Autocomplete options
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
" Only auto start the commad for certaing file types
autocmd FileType haskell nested NeoCompleteEnable
" We don't use this because it will start the autocompletion for any file
" let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

" Enable omni completion.
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" Hoogle
au BufNewFile,BufRead *.hs map <buffer> <F1> :Hoogle
" au BufNewFile,BufRead *.hs map <buffer> <S-F1> :HoogleLine<CR>

" Easymotion
" re-map default <Leader> <Leader> to just <Leader>
map <Leader> <Plug>(easymotion-prefix)
nmap s <Plug>(easymotion-sn)
nmap t <Plug>(easymotion-tn)
" don't allow abuse of hjkl
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" Yankring
nnoremap <silent> <F11> :YRShow<CR>

" Close buffer
nnoremap <F10> :bd<CR>

" Enable to switch between buffers without saving
set hidden

" Ghc Mod bindings
nnoremap <F5> :GhcModCheck<CR>
nnoremap <C-h> :GhcModType<CR>
nnoremap <C-l> :GhcModTypeClear<CR>

" Syntastic
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_always_populate_loc_list=1
let g:syntastic_haskell_checkers = ["ghc_mod","hlint"]


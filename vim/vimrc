set nocompatible              " be iMproved, required
set showcmd
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'


" Plugins

" Some defaults kindof
Plugin 'tpope/vim-commentary'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'vim-scripts/YankRing.vim'
Plugin 'vim-scripts/auto-pairs-gentle'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'scrooloose/nerdtree'
Plugin 'milkypostman/vim-togglelist'
Plugin 'skywind3000/asyncrun.vim'
Plugin 'neomake/neomake'
Plugin 'jceb/vim-orgmode'

" Moving around and such
Plugin 'easymotion/vim-easymotion'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-scripts/buftabs'

" Markup
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Haskell
Plugin 'alx741/vim-hindent' " needs hindent on $PATH (stack install hindent)
Plugin 'Twinside/vim-hoogle' " stack install hoogle; hoogle generate
Plugin 'eagletmt/ghcmod-vim'  " needs stack install ghc-mod
Plugin 'nbouscal/vim-stylish-haskell' " needs stylish-haskell on $PHATH (stack install stylish-haskell)
Plugin 'Shougo/vimproc.vim'
Plugin 'eagletmt/neco-ghc'

" Purescript
Plugin 'raichoo/purescript-vim'
Plugin 'FrigoEU/psc-ide-vim'

" Syntax highlight and autocomplete
Plugin 'Shougo/neocomplete.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'bling/vim-airline'

" Git gutters
Plugin 'mhinz/vim-signify'
Plugin 'Yggdroot/indentLine'

" Markdown
Plugin 'plasticboy/vim-markdown'

" Themes
Plugin 'tomasr/molokai'
Plugin 'flazz/vim-colorschemes'

" Dpaste
Plugin 'vim-scripts/Dpaste.com-Plugin'

" todo.txt
Plugin 'freitass/todo.txt-vim'

" =============== Sensible defaults ===============

" Whiste space: Show tabs
set list
set listchars=tab:\|\

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" re-map leader key
" let mapleader=","
let maplocalleader = "\\"

set completeopt=menu,longest

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" tab manipulation
" nnoremap <C-j> :tabprev<cr>
" nnoremap <C-k> :tabnext<cr>

" buffer manipulation
:noremap <C-j> :bnext<CR>
:noremap <C-k> :bprev<CR>

" window manipulation
:map <F6> <C-W>w

" Don't fold blocks
let g:haskell_conceal = 0
autocmd FileType haskell setlocal nofoldenable
autocmd FileType cabal setlocal nofoldenable

set pastetoggle=<F2>

" markdown folding
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_conceal = 0
autocmd FileType markdown set tw=120

" tabs and spaces and indent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set autoindent

let g:indentLine_enabled = 0

" line numbers
set number

" Close buffer
nnoremap <F10> :bd<CR>

" Enable to switch between buffers without saving
set hidden

" highlithgt trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" status line at all times
set laststatus=2

" Powerline fonts
let g:airline_powerline_fonts = 1

" Spelling
nnoremap <F7> :setlocal spell! spelllang=en_us<CR>
autocmd FileType gitcommit setlocal spell

" =============== PLUGINS ===============


" =============== CTRLP ===============
" Custom ctrlp ignore options
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)|(dist|node_modules|build)$',
  \ 'file': '\v\.(pyc)$',
  \ }

" =============== Color Theme ===============
colorscheme busybee

" =============== Hoogle ===============
au BufNewFile,BufRead *.hs map <buffer> <F1> :Hoogle
" au BufNewFile,BufRead *.hs map <buffer> <S-F1> :HoogleLine<CR>

" =============== Easymotion ===============

" re-map default <Leader> <Leader> to just <Leader>
" map <Leader> <Plug>(easymotion-prefix)
" nmap s <Plug>(easymotion-sn)
" nmap t <Plug>(easymotion-tn)
" don't allow abuse of hjkl
map <leader>l <Plug>(easymotion-lineforward)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" =============== Yankring ===============
nnoremap <silent> <F12> :YRShow<CR>

" =============== GhcMod bindings ===============

nnoremap <F5>  :GhcModCheckAndLint<CR>
nnoremap <C-h> :GhcModType<CR>
nnoremap <C-l> :GhcModTypeClear<CR>
nnoremap <leader>- :GhcModInfo<CR>

map <silent> ti :GhcModTypeInsert<CR>
map <silent> ts :GhcModSplitFunCase<CR>
map <silent> tt :GhcModType<CR>
map <silent> tc :GhcModTypeClear<CR>
map <silent> tg :GhcModSigCodegen<CR>
" Auto lint and check with ghc-mod on buffer write
" autocmd BufWritePost *.hs GhcModCheckAsync


" =============== Syntastic ===============
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_always_populate_loc_list=1

" let g:syntastic_debug = 3
map <Leader>s :SyntasticToggleMode<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" =============== Tabular ===============
let g:haskell_tabular = 1

vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>

" =============== NerdTree ===============
map <Leader>n :NERDTreeToggle<CR>


" =============== UltiSnips ===============
let g:UltiSnipsExpandTrigger="<C-u>"

" hindent
let g:hindent_on_save = 0

" neocomplete
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" " Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" ========= Haskell specific ==========
au FileType haskell compiler ghc
au FileType haskell setlocal makeprg=stack
" au FileType haskell nnoremap <buffer> gj :write<CR> :exec "AsyncRun " . &makeprg . " build"<CR>
" au FileType haskell nnoremap <buffer> gk :write<CR> :exec "AsyncRun " . &makeprg . " test"<CR>
au FileType haskell nnoremap <buffer> gll :Neomake<CR>
au FileType haskell nnoremap <buffer><silent> gl<space> :call ToggleLocationList()<CR>
au FileType haskell nnoremap <buffer><silent> glc :sign unplace *<CR>


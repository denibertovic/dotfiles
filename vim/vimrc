set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'


" Plugins

" Some defaults kindof
Plugin 'tpope/vim-commentary'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/YankRing.vim'
Plugin 'jiangmiao/auto-pairs'

" Moving around and such
Plugin 'Lokaltog/vim-easymotion'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-scripts/buftabs'

" Markup
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}

" Haskell mode
Plugin 'dag/vim2hs'
Plugin 'Twinside/vim-hoogle' " cabal install hoogle; hoogle data
Plugin 'eagletmt/ghcmod-vim'  " needs cabal install ghc-mod
Plugin 'nbouscal/vim-stylish-haskell'
Plugin 'Shougo/vimproc.vim'

" Syntax highlight and autocomplete
Plugin 'Valloric/YouCompleteMe'
Plugin 'eagletmt/neco-ghc'
Plugin 'scrooloose/syntastic'
Plugin 'bling/vim-airline'

" Git gutters
Plugin 'mhinz/vim-signify'

" Markdown
Plugin 'plasticboy/vim-markdown'

" Themes
Plugin 'tomasr/molokai'
Plugin 'flazz/vim-colorschemes'

" Dpaste
Plugin 'vim-scripts/Dpaste.com-Plugin'

" Whiste space: Show tabs
set list
set listchars=tab:\|\

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" re-map leader key
let mapleader=","

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>


" Custom ctrlp ignore options
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)|(dist)$',
  \ 'file': '\v\.(pyc)$',
  \ }

" tab manipulation
" nnoremap <C-j> :tabprev<cr>
" nnoremap <C-k> :tabnext<cr>

" buffer manipulation
:noremap <C-j> :bprev<CR>
:noremap <C-k> :bnext<CR>

" Don't fold blocks
let g:haskell_conceal = 0
autocmd FileType haskell setlocal nofoldenable

set pastetoggle=<F2>

" markdown folding
let g:vim_markdown_folding_disabled=1

" tabs and spaces and indent
set tabstop=4
set shiftwidth=4
set expandtab
set softtabstop=4
set autoindent

" line numbers
set number

" highlithgt trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" status line at all times
set laststatus=2

" use powerline fonts
let g:airline_powerline_fonts = 1

" Color Theme
colorscheme busybee

" Hoogle
au BufNewFile,BufRead *.hs map <buffer> <F1> :Hoogle
" au BufNewFile,BufRead *.hs map <buffer> <S-F1> :HoogleLine<CR>

" Easymotion
" re-map default <Leader> <Leader> to just <Leader>
map <Leader> <Plug>(easymotion-prefix)
nmap s <Plug>(easymotion-sn)
nmap t <Plug>(easymotion-tn)
" don't allow abuse of hjkl
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)

let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" Yankring
nnoremap <silent> <F11> :YRShow<CR>

" Close buffer
nnoremap <F10> :bd<CR>

" Enable to switch between buffers without saving
set hidden

" Ghc Mod bindings
nnoremap <F5> :GhcModCheck<CR>
nnoremap <C-h> :GhcModType<CR>
nnoremap <C-l> :GhcModTypeClear<CR>

" Syntastic
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_always_populate_loc_list=1

" let g:syntastic_debug = 3
" Enable syntastic checker only for python
let g:syntastic_mode_map = {
            \ "mode": "active",
            \ "active_filetypes": ["python"],
            \ "passive_filetypes": ["haskell"]}


" Haskell autocomplete with YCM
let g:ycm_semantic_triggers = {'haskell' : ['.']}

" Auto lint and check with ghc-mod on buffer write
autocmd BufWritePost *.hs GhcModCheckAndLintAsync
